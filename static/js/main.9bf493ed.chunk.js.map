{"version":3,"sources":["App.css","components/Input/Input.css","components/Weather/Weather.css","components/MoreInfo/MoreInfo.css","components/Input/Input.jsx","components/Weather/Weather.jsx","components/MoreInfo/MoreInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","className","classes","InputBox","onSubmit","showWeather","type","name","placeholder","Search","Weather","styles","hide","Heading","city","country","WeatherBox","description","mainTemperature","temp_max","temp_min","style","display","MoreBtn","onClick","showInfo","MoreInfo","MoreBox","wind","humidity","clouds","pressure","Api_Key","App","state","cloudiness","loaded","moreInfo","error","getWeatherData","e","a","preventDefault","target","elements","text","value","fetch","getData","json","parsedData","setState","sys","main","temp","weather","speed","all","handleMoreInfo","convertToCelsius","temperatue","Math","floor","capitalizeFirst","str","toUpperCase","slice","showError","showMoreInfo","this","Error","Header","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,IAAM,kBAAkB,OAAS,qBAAqB,MAAQ,sB,gBCAhFD,EAAOC,QAAU,CAAC,SAAW,yBAAyB,MAAQ,sBAAsB,OAAS,yB,gBCA7FD,EAAOC,QAAU,CAAC,WAAa,6BAA6B,MAAQ,wBAAwB,QAAU,0BAA0B,QAAU,4B,uBCA1ID,EAAOC,QAAU,CAAC,QAAU,2BAA2B,QAAU,6B,uOCgBlDC,EAdD,SAAAC,GAAK,OACjB,yBAAKC,UAAWC,IAAQC,UACtB,0BAAMC,SAAUJ,EAAMK,aACpB,2BACEJ,UAAWC,IAAQH,MACnBO,KAAK,OACLC,KAAK,OACLC,YAAY,kBAEd,4BAAQP,UAAWC,IAAQO,QAA3B,a,gBCuBSC,EAhCC,SAAAV,GACd,IAAIW,EAAS,GAGb,OAFoCA,EAAnCX,EAAMY,KAAsC,OAArB,QAGtB,6BACE,wBAAIX,UAAWC,IAAQW,SAAvB,cACcb,EAAMc,KADpB,KAC4Bd,EAAMe,QADlC,KAGA,yBAAKd,UAAWC,IAAQc,YACtB,+BAAKhB,EAAMiB,aACX,2BACE,gCAASjB,EAAMkB,gBAAf,UAEF,mCACO,gCAASlB,EAAMmB,SAAf,UAEP,mCACO,gCAASnB,EAAMoB,SAAf,UAEP,0BACEC,MAAO,CAAEC,QAASX,GAClBV,UAAWC,IAAQqB,QACnBC,QAASxB,EAAMyB,UAHjB,gB,iBCDOC,EAnBE,SAAA1B,GACf,OACE,yBAAKC,UAAWC,IAAQyB,SACtB,0CACc,gCAAS3B,EAAM4B,KAAf,UAEd,uCACW,oCAAU5B,EAAM6B,SAAhB,KAAoC,KAE/C,2CACe,gCAAS7B,EAAM8B,OAAf,QAEf,oDACwB,gCAAS9B,EAAM+B,aCTvCC,EAAU,mCA+GDC,E,2MA5GbC,MAAQ,CACNpB,KAAM,KACNC,QAAS,KACTG,gBAAiB,KACjBC,SAAU,KACVC,SAAU,KACVH,YAAa,GACbc,SAAU,KACVF,SAAU,KACVD,KAAM,KACNO,WAAY,KACZC,QAAQ,EACRC,UAAU,EACVC,OAAO,G,EAGTC,e,uCAAiB,WAAMC,GAAN,mBAAAC,EAAA,6DACfD,EAAEE,iBADa,SAGP5B,EAAO0B,EAAEG,OAAOC,SAASC,KAAKC,MAHvB,SAISC,MAAM,qDAAD,OAC4BjC,EAD5B,kBAC0CkB,IALxD,cAIPgB,EAJO,gBAOYA,EAAQC,OAPpB,OAOPC,EAPO,OAQb,EAAKC,SAAS,CACZd,UAAU,EACVvB,KAAMoC,EAAW3C,KACjBQ,QAASmC,EAAWE,IAAIrC,QACxBG,gBAAiBgC,EAAWG,KAAKC,KACjCnC,SAAU+B,EAAWG,KAAKlC,SAC1BC,SAAU8B,EAAWG,KAAKjC,SAC1BH,YAAaiC,EAAWK,QAAQ,GAAGtC,YACnCc,SAAUmB,EAAWG,KAAKtB,SAC1BF,SAAUqB,EAAWG,KAAKxB,SAC1BD,KAAMsB,EAAWtB,KAAK4B,MACtBrB,WAAYe,EAAWpB,OAAO2B,IAC9BrB,QAAQ,EACRE,OAAO,IArBI,kDAwBb,EAAKa,SAAS,CAAEb,OAAO,IAxBV,0D,wDA4BjBoB,eAAiB,WACf,EAAKP,SAAS,CAAEd,UAAU,K,EAG5BsB,iBAAmB,SAAAC,GAEjB,OADcC,KAAKC,MAAMF,EAAa,S,EAIxCG,gBAAkB,SAAAC,GAChB,OAAOA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,I,wEAIxC,IAAIC,EAAY,KACZC,EAAe,KACf/D,EAAc,KAoClB,OAjCEA,EADEgE,KAAKnC,MAAME,OAEX,kBAAC,EAAD,CACEtB,KAAMuD,KAAKnC,MAAMpB,KACjBC,QAASsD,KAAKnC,MAAMnB,QACpBG,gBAAiBmD,KAAKV,iBAAiBU,KAAKnC,MAAMhB,iBAClDC,SAAUkD,KAAKV,iBAAiBU,KAAKnC,MAAMf,UAC3CC,SAAUiD,KAAKV,iBAAiBU,KAAKnC,MAAMd,UAC3CH,YAAaoD,KAAKN,gBAAgBM,KAAKnC,MAAMjB,aAC7CQ,SAAU4C,KAAKX,eACf9C,KAAMyD,KAAKnC,MAAMG,WAIP,KAId+B,EADEC,KAAKnC,MAAMG,SAEX,kBAAC,EAAD,CACEN,SAAUsC,KAAKnC,MAAMH,SACrBF,SAAUwC,KAAKnC,MAAML,SACrBD,KAAMyC,KAAKnC,MAAMN,KACjBE,OAAQuC,KAAKnC,MAAMC,aAIR,KAGbkC,KAAKnC,MAAMI,QACb6B,EAAY,uBAAGlE,UAAWC,IAAQoE,OAAtB,8BAIZ,yBAAKrE,UAAWC,IAAQ+B,KACrBkC,EACD,wBAAIlE,UAAWC,IAAQqE,QAAvB,+BACA,kBAAC,EAAD,CAAOlE,YAAagE,KAAK9B,iBACxBlC,EACA+D,O,GAvGSI,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9bf493ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__1o-Fp\",\"Header\":\"App__Header__3mO0c\",\"Error\":\"App__Error__1dkvT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputBox\":\"Input__InputBox__3Idzs\",\"Input\":\"Input__Input___6rOs\",\"Search\":\"Input__Search__zNjzu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherBox\":\"Weather__WeatherBox__2F81j\",\"scale\":\"Weather__scale__2gI78\",\"MoreBtn\":\"Weather__MoreBtn__1PSoW\",\"Heading\":\"Weather__Heading__1ZCaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoreBox\":\"MoreInfo__MoreBox__3YJsL\",\"opacity\":\"MoreInfo__opacity__17dAb\"};","import React from \"react\";\r\nimport classes from \"./Input.css\";\r\n\r\nconst Input = props => (\r\n  <div className={classes.InputBox}>\r\n    <form onSubmit={props.showWeather}>\r\n      <input\r\n        className={classes.Input}\r\n        type=\"text\"\r\n        name=\"text\"\r\n        placeholder=\"Type a city..\"\r\n      ></input>\r\n      <button className={classes.Search}>Search</button>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport classes from \"./Weather.css\";\r\n\r\nconst Weather = props => {\r\n  let styles = \"\";\r\n  !props.hide ? (styles = \"block\") : (styles = \"none\");\r\n\r\n  return (\r\n    <div>\r\n      <h3 className={classes.Heading}>\r\n        Weather in {props.city}, {props.country}:\r\n      </h3>\r\n      <div className={classes.WeatherBox}>\r\n        <p> {props.description}</p>\r\n        <p>\r\n          <strong>{props.mainTemperature}&deg;C</strong>\r\n        </p>\r\n        <p>\r\n          Max: <strong>{props.temp_max}&deg;C</strong>\r\n        </p>\r\n        <p>\r\n          Min: <strong>{props.temp_min}&deg;C</strong>\r\n        </p>\r\n        <span\r\n          style={{ display: styles }}\r\n          className={classes.MoreBtn}\r\n          onClick={props.showInfo}\r\n        >\r\n          More Info\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport classes from \"./MoreInfo.css\";\r\n\r\nconst MoreInfo = props => {\r\n  return (\r\n    <div className={classes.MoreBox}>\r\n      <p>\r\n        Wind Speed: <strong>{props.wind} m/s </strong>\r\n      </p>\r\n      <p>\r\n        Humidity:<strong> {props.humidity}%</strong>{\" \"}\r\n      </p>\r\n      <p>\r\n        Cloudiness : <strong>{props.clouds} % </strong>\r\n      </p>\r\n      <p>\r\n        Atmospheric pressure: <strong>{props.pressure}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoreInfo;\r\n","import React, { Component } from \"react\";\nimport classes from \"./App.css\";\n\nimport Input from \"./components/Input/Input\";\nimport Weather from \"./components/Weather/Weather\";\nimport MoreInfo from \"./components/MoreInfo/MoreInfo\";\n\nconst Api_Key = \"79b63a8e14c9e0cb2d5cfaf0d76b208a\";\n\nclass App extends Component {\n  state = {\n    city: null,\n    country: null,\n    mainTemperature: null,\n    temp_max: null,\n    temp_min: null,\n    description: \"\",\n    pressure: null,\n    humidity: null,\n    wind: null,\n    cloudiness: null,\n    loaded: false,\n    moreInfo: false,\n    error: false\n  };\n\n  getWeatherData = async e => {\n    e.preventDefault();\n    try {\n      const city = e.target.elements.text.value;\n      const getData = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${Api_Key}`\n      );\n      const parsedData = await getData.json();\n      this.setState({\n        moreInfo: false,\n        city: parsedData.name,\n        country: parsedData.sys.country,\n        mainTemperature: parsedData.main.temp,\n        temp_max: parsedData.main.temp_max,\n        temp_min: parsedData.main.temp_min,\n        description: parsedData.weather[0].description,\n        pressure: parsedData.main.pressure,\n        humidity: parsedData.main.humidity,\n        wind: parsedData.wind.speed,\n        cloudiness: parsedData.clouds.all,\n        loaded: true,\n        error: false\n      });\n    } catch (error) {\n      this.setState({ error: true });\n    }\n  };\n\n  handleMoreInfo = () => {\n    this.setState({ moreInfo: true });\n  };\n\n  convertToCelsius = temperatue => {\n    let celsius = Math.floor(temperatue - 273.15);\n    return celsius;\n  };\n\n  capitalizeFirst = str => {\n    return str[0].toUpperCase() + str.slice(1);\n  };\n\n  render() {\n    let showError = null;\n    let showMoreInfo = null;\n    let showWeather = null;\n\n    if (this.state.loaded) {\n      showWeather = (\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          mainTemperature={this.convertToCelsius(this.state.mainTemperature)}\n          temp_max={this.convertToCelsius(this.state.temp_max)}\n          temp_min={this.convertToCelsius(this.state.temp_min)}\n          description={this.capitalizeFirst(this.state.description)}\n          showInfo={this.handleMoreInfo}\n          hide={this.state.moreInfo}\n        />\n      );\n    } else {\n      showWeather = null;\n    }\n\n    if (this.state.moreInfo) {\n      showMoreInfo = (\n        <MoreInfo\n          pressure={this.state.pressure}\n          humidity={this.state.humidity}\n          wind={this.state.wind}\n          clouds={this.state.cloudiness}\n        />\n      );\n    } else {\n      showMoreInfo = null;\n    }\n\n    if (this.state.error) {\n      showError = <p className={classes.Error}>Please type another city.</p>;\n    }\n\n    return (\n      <div className={classes.App}>\n        {showError}\n        <h1 className={classes.Header}>Weather forecast for cities</h1>\n        <Input showWeather={this.getWeatherData} />\n        {showWeather}\n        {showMoreInfo}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}